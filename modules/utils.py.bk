from modules.router import *
import json
from prettytable import PrettyTable
import paramiko
import requests
import os
import time
import getpass
clear = lambda:os.system('clear')

class Utils:
	def __init__ ( self, conn,config):
		self.conn = conn
		self.select = True
		self.config = config
		
	# show servers in project and choose an server
	def choose_server(self):
		print('List of servers in project')
		for index,s in enumerate(self.conn.compute.servers()):
			print('{}:{}').format(index,s.name)
		server = None	
		print('Hint: You can type "quit" to exit')
		name = raw_input('Choose vm name: ')
		if ( name == 'Quit' or name == 'quit' or name =='QUIT'):
			return
		else:
			server = next(( s for s in self.conn.compute.servers() if s.name == name),None)
		if server is None:
			raise Exception('Vm not existed')
		return server 
	

	# list networks id which vm belongs to 
	def get_server_networks(self, ports):
		return [p['net_id'] for p in ports]

	def get_vm_routers(self, project_id, vm_networks ):
		routers = self.conn.network.routers(project_id = project_id)
        	_routers = []
        	for i in routers:
                	router_interfaces = []
                	router_gateway = None
                	ports = self.conn.network.ports(device_id = i.id)
                	for p in ports:
                        	if p.device_owner == 'network:router_gateway':
                                	router_gateway = p
                        	if p.device_owner == 'network:router_interface' and (p.network_id in vm_networks):
                                	router_interfaces.append(p)
                	_routers.append(Router(i.id,i.name,router_gateway,router_interfaces))
		return _routers

	


	def create_pat(self):

		try:
			server = self.choose_server()
			vm_routers = self.vm_topo(server)	

			# input	
			ip = raw_input('Enter the IP of vm: ')
			router_name = raw_input('Enter the name of router: ')
			# interface = raw_input('Enter the interface ip of router: ')  # if you want explicit the snat, using masquerade instead of snat
			
			# check router
			router = next((i for i in vm_routers if i.router_name == router_name),None)		
			if router is None:
				raise Exception('Router not existed')
			
			
			gateway = router.router_gateway.fixed_ips[0]['ip_address']
			qrouter = 'qrouter-' +router.router_id
		
			x = requests.get('http://controller:3000/router_vm_ports?router={}&server={}'.format(qrouter, ip)).json()		
			table = PrettyTable()
                	table.field_names = ["Server", "Server Ip Address", "Server Port Opened" , "Router Port Opened", "Router name"]
                	table.sortby = 'Server Port Opened'
                	for key,value in x.items():
                        	table.add_row([server.name, ip , key, value, router.router_name])
                	print(table)
			
			vmport = raw_input('Enter the port vm you want to open: ')
			y = requests.post('http://controller:3000/add?server={}&router={}&vmport={}&gateway={}'.format(ip,qrouter,vmport,gateway))
			print(y.text)
		except Exception as e:
			print(e)
		finally:
			_exit = raw_input('Press any thing to continue')
 	# modify port vm which has opened
	# querry all vm port on all router
	def modify_pat(self):

		try:
			server = self.choose_server()
	  		vm_routers = self.vm_topo(server)

			# input
			ip = raw_input('Enter the IP of vm: ')
			router_name = raw_input('Enter the name of router: ')
		
			router = next((i for i in vm_routers if i.router_name == router_name),None)			
			if router is None:
                                raise Exception('Router not existed')
			qrouter = 'qrouter-' + router.router_id
			gateway = router.router_gateway.fixed_ips[0]['ip_address']

			x = requests.get('http://controller:3000/router_vm_ports?router={}&server={}'.format(qrouter, ip)).json()
                        table = PrettyTable()
                        table.field_names = ["Server", "Server Ip Address", "Server Port Opened" , "Router Port Opened", "Router name", "Gateway"]
                        table.sortby = 'Server Port Opened'
                        for key,value in x.items():
                                table.add_row([server.name, ip , key, value, router.router_name, gateway])
                        print(table)
		
			vmport = raw_input('Enter port vm: ')
			new_router_port = raw_input('Enter new router port: ')
			remove_response = requests.post('http://controller:3000/modify?server={}&router={}&new_router_port={}&vmport={}&gateway={}'.format(ip,qrouter,new_router_port,vmport,gateway))
                        print(remove_response.text)

		except Exception as e:
			print(e)
		finally:
			_exit = raw_input('Press any thing to continue')
	# create floating ip attach to vm
	def create_floating_ip(self):

		#return self.conn.create_floating_ip(network=_network ,server=_server ,nat_destination=_nat_net,port=port_id)
		try:
                        clear()
                        server = self.choose_server()
                        vm_routers = self.vm_topo(server)
			provider_networks = self.conn.network.networks(is_router_external = True , is_shared = True ,provider_physical_network='provider' )
			for i,net in enumerate(provider_networks) :
				print('{}.{}').format(i,net.name)
			if not provider_networks:
				raise Exception('No provider network created to provide floating ip')
			name = raw_input('Choose provider: ')
				
			provider_network = next((i for i in self.conn.network.networks(is_router_external = True , is_shared = True ,provider_physical_network='provider' ) if i.name == name),None)
			
			if provider_network is None:
				raise Exception('You type wrong name')	
			print('Floating available:')
			ips = self.conn.network.ips(project_id=self.conn.current_project_id, floating_network_id = provider_network.id,status='DOWN')	
			for i in ips:
				print(i.floating_ip_address)

			ports = self.conn.compute.get("/servers/{}/os-interface".format(server.id)).json()['interfaceAttachments']
			print('Vm interface port:')
			for p in ports:
				print(p['fixed_ips'][0]['ip_address'])
			
			ip = raw_input('Enter ip of vm port: ')
			port = next((i for i in ports if ip == i['fixed_ips'][0]['ip_address']),None)
			if port is None:
				raise Exception('You type wrong port')
			choice = raw_input('Choose floating ip or type "new" to create new one:') 
			if choice == "new":
				ip = self.conn.create_floating_ip(network=provider_network.id,server=server,nat_destination=port['net_id'],port=port['port_id'])	
			else:
				#self.conn.compute.add_floating_ip_to_server(server,choice,port['fixed_ips'][0]['ip_address'])	
				_floating = next((i for i in self.conn.network.ips(project_id=self.conn.current_project_id, floating_network_id = provider_network.id,status='DOWN') if choice == i.floating_ip_address),None)
				if _floating is not None:
					self.conn.compute.add_floating_ip_to_server(server,_floating.floating_ip_address,port['fixed_ips'][0]['ip_address'])
				else: 
					floating_ip = self.conn.network.create_ip(floating_ip_address = choice,floating_network_id = provider_network.id, project_id = self.conn.current_project_id,
									port_id = port['port_id'])
				
				 
				
                except Exception as e:
                        print(e)
                finally:
			_exit = raw_input('Press any thing to continue')	

	# remove port vm which has opened
	# quet tat ca cac thong tin cua router de tim vm port
	def remove_pat(self):
		
		try:
			server = self.choose_server()
                	vm_routers = self.vm_topo(server)

	                ip = raw_input('Enter the IP of vm: ')
                	router_name = raw_input('Enter the name of router: ')
               		router = next((i for i in vm_routers if i.router_name == router_name),None)		
			if router is None:
                                raise Exception('Router not existed')


			gateway = router.router_gateway.fixed_ips[0]['ip_address']
              		qrouter = 'qrouter-' + router.router_id
			
			x = requests.get('http://controller:3000/router_vm_ports?router={}&server={}'.format(qrouter, ip)).json()
                        table = PrettyTable()
                        table.field_names = ["Server", "Server Ip Address", "Server Port Opened" , "Router Port Opened", "Router name", "Gateway"]
                        table.sortby = 'Server Port Opened'
                        for key,value in x.items():
                                table.add_row([server.name, ip , key, value, router.router_name, gateway])
                        print(table)

			
                	vmport = raw_input('Enter server port you want to remove?: ')

			remove_response = requests.post('http://controller:3000/remove?server={}&router={}&vmport={}&gateway={}'.format(ip,qrouter,vmport,gateway))
			print(remove_response.text)
			

		except Exception as e:
			print(e)
		finally:
			_exit = raw_input('Press any thing to continue')
	# show instance's network topology
	def network_topo(self):
		try:
			clear()
			server = self.choose_server()
			vm_routers = self.vm_topo(server)	
		except Exception as e:
			print(e)
		finally:
			_exit = raw_input('Press any thing to continue')
	# quit 
	def quit(self):
		self.select = False	

	def change_project (self):
		clear()
		print('Current project: {}').format(self.conn.current_project.name)
		print('Choose project you want:')

		try:
			for i,p in enumerate(self.conn.identity.user_projects(self.conn.current_user_id)):
                        	if ( p.name != 'service'):
                                	print('{}:{}').format(i,p.name)
                	project = raw_input('Project name: ')
			_conn = self.conn.connect_as_project(project)
			_conn.authorize()
			self.conn = _conn
			print('Login project {} successfully').format(project)
		except Exception as e:
			print(e)
			print('Login project failed')
		finally:
			_exit = raw_input('Press any thing to continue')


	# re-login with another user
	def change_user(self):
		clear()
		user = self.conn.identity.get_user(self.conn.current_user_id)
		
		print('You are logging with user: {}').format(user.name)
		
		username = raw_input('Username: ')
		password = getpass.getpass('Password: ')
		try:
			_conn = self.conn.connect_as(username=username, password=password)
			_conn.authorize()
			self.conn = _conn
			print('Login successfully')
		except Exception as e :
			print(e)
			print('Re-loggin failed')
		finally:
			_exit = raw_input('Press any thing to continue')
				
	# invalid option
	def invalid (self):
		clear()
		print('Invalid choice')
		time.sleep(2)

	def select_option (self):
		
		if self.conn.current_project.name is None:
			self.change_project()
		while self.select:
			clear()
			print('Current project: {},logged with user {}').format(self.conn.current_project.name,self.conn.identity.get_user(self.conn.current_user_id).name)	
			print('1. Add Port Address Translation')
			print('2. Modify PAT')
			print('3. Remove PAT')
			print('4. Router checking')
			print('5. VM network topology')
			print('6. Change project')
			print('7. Change user')
			print('8. Quit')
			choice = raw_input('Enter option number: ')
			switcher = {
				'1': self.create_pat,
				'2': self.modify_pat,
				'4': self.show_router_ports,
				'3': self.remove_pat,
				'5': self.network_topo,
				'6': self.change_project,
				'7': self.change_user,
				'8': self.quit 
			}
			func = switcher.get(choice,self.invalid)()

	def get_vm_name_by_ip(self,server_ip_address):
		ports = self.conn.network.ports()
       		port = next((i for i in ports if i['fixed_ips'][0]['ip_address'] == server_ip_address),None)
		if port is None:
			return 'None'
		server = self.conn.get_server_by_id(port.device_id)
		return server.name

	def show_router_ports(self):
		routers = self.conn.network.routers(project_id = self.conn.current_project_id ) 	
		print('Router list')
		for i,router in enumerate(routers):
			print('{}:{}').format(i,router.name)
		router_name = raw_input('Enter router name')
		_router_ = next(( i for i in self.conn.network.routers(project_id = self.conn.current_project_id ) if i.name == router_name),None)
		qrouter = 'qrouter-' + _router_.id
		x = requests.get('http://controller:3000/router_ports?router={}'.format(qrouter)).json()
		table = PrettyTable()
		table.field_names = ["Server", "Server IP", "Server Port", "Router Port"]
		table.sortby = 'Server'
		for key,value in x.items():
			server_name = self.get_vm_name_by_ip(key[:-3])
			table.add_row([server_name,key[:-3],key[-2:],value])
		print(table)
		_exit = raw_input('Enter anything')


	def print_topology(self,_routers, _server ):
		clear()
		print('Virtual machine network topology')
		topo = 'VM:{}-ip:{},floating:{}--------{}:{}--------if:{}-R[{}]-gw:{}--------{}:{}--------Internet'
		for s in _routers:
                	for i in s.router_interfaces:
				# subnet ids of gateway and interfaces
                        	subnet_interface = self.conn.network.get_subnet(i.fixed_ips[0]['subnet_id'])
                        	subnet_gateway = self.conn.network.get_subnet(s.router_gateway.fixed_ips[0]['subnet_id']) 
				
                        	net1 =  self.conn.network.get_network(subnet_gateway.network_id)  # network of gateway
                        	net2 =  self.conn.network.get_network(subnet_interface.network_id)  # network of an interface
				
                        	if net2.name in _server.addresses:
                                	fixed_ip = next((i for i in _server.addresses[net2.name] if i['OS-EXT-IPS:type'] == 'fixed'),'None')
                                	#floating_ip = next((i for i in _server.addresses[net2.name] if i['OS-EXT-IPS:type'] == 'floating'),'None')
					ips = next((i for i in self.conn.network.ips() if i.fixed_ip_address == fixed_ip['addr'] and i.router_id == s.router_id),None)
	
					# get floating of vm ipv4 if exists
					floating_ip = ips.floating_ip_address if ips else 'None'  
                        	print(topo).format(_server.name,fixed_ip['addr'],floating_ip,net2.name,subnet_interface.cidr,i.fixed_ips[0]['ip_address'],s.router_name,s.router_gateway.fixed_ips[0]['ip_address'],net1.name,subnet_gateway.cidr)		
		_exit = raw_input('Press anything to continue')

	def vm_topo (self , server ):
		if server is None:
			return
		# get port attach to vm
		interface_server_attachments = self.conn.compute.get("/servers/{}/os-interface".format(server.id)).json()['interfaceAttachments']
		# get netword_id which ports belongs
                server_networks = self.get_server_networks(interface_server_attachments)
		# get project id 
                project_id = self.conn.current_project.id 
		# get vm_router link
                vm_routers = self.get_vm_routers(project_id, server_networks)
                self.print_topology(vm_routers,server)
		return vm_routers
